// node_modules/pannellum/build/pannellum.js
window.libpannellum = function(E, g, p) {
  function Ba(K) {
    function ja(a2, e) {
      return 1 == a2.level && 1 != e.level ? -1 : 1 == e.level && 1 != a2.level ? 1 : e.timestamp - a2.timestamp;
    }
    function Q(a2, e) {
      return a2.level != e.level ? a2.level - e.level : a2.diff - e.diff;
    }
    function ka(a2, e, c2, g2, l, h) {
      this.vertices = a2;
      this.side = e;
      this.level = c2;
      this.x = g2;
      this.y = l;
      this.path = h.replace("%s", e).replace("%l", c2).replace("%x", g2).replace("%y", l);
    }
    function Ja(a2, e, g2, p2, l) {
      var h;
      var d = e.vertices;
      h = la(a2, d.slice(0, 3));
      var u = la(a2, d.slice(3, 6)), x = la(a2, d.slice(6, 9)), d = la(a2, d.slice(
        9,
        12
      )), t = h[0] + u[0] + x[0] + d[0];
      -4 == t || 4 == t ? h = false : (t = h[1] + u[1] + x[1] + d[1], h = -4 == t || 4 == t ? false : 4 != h[2] + u[2] + x[2] + d[2]);
      if (h) {
        h = e.vertices;
        u = h[0] + h[3] + h[6] + h[9];
        x = h[1] + h[4] + h[7] + h[10];
        d = h[2] + h[5] + h[8] + h[11];
        t = Math.sqrt(u * u + x * x + d * d);
        d = Math.asin(d / t);
        u = Math.atan2(x, u) - p2;
        u += u > Math.PI ? -2 * Math.PI : u < -Math.PI ? 2 * Math.PI : 0;
        u = Math.abs(u);
        e.diff = Math.acos(Math.sin(g2) * Math.sin(d) + Math.cos(g2) * Math.cos(d) * Math.cos(u));
        u = false;
        for (x = 0; x < c.nodeCache.length; x++) if (c.nodeCache[x].path == e.path) {
          u = true;
          c.nodeCache[x].timestamp = c.nodeCacheTimestamp++;
          c.nodeCache[x].diff = e.diff;
          c.currentNodes.push(c.nodeCache[x]);
          break;
        }
        u || (e.timestamp = c.nodeCacheTimestamp++, c.currentNodes.push(e), c.nodeCache.push(e));
        if (e.level < c.level) {
          var d = m.cubeResolution * Math.pow(2, e.level - m.maxLevel), u = Math.ceil(d * m.invTileResolution) - 1, x = d % m.tileResolution * 2, k2 = 2 * d % m.tileResolution;
          0 === k2 && (k2 = m.tileResolution);
          0 === x && (x = 2 * m.tileResolution);
          t = 0.5;
          if (e.x == u || e.y == u) t = 1 - m.tileResolution / (m.tileResolution + k2);
          var y = 1 - t, d = [], s2 = t, z2 = t, D = t, I = y, A2 = y, B = y;
          if (k2 < m.tileResolution) if (e.x == u && e.y != u) {
            if (A2 = z2 = 0.5, "d" == e.side || "u" == e.side) B = D = 0.5;
          } else e.x != u && e.y == u && (I = s2 = 0.5, "l" == e.side || "r" == e.side) && (B = D = 0.5);
          x <= m.tileResolution && (e.x == u && (s2 = 0, I = 1, "l" == e.side || "r" == e.side) && (D = 0, B = 1), e.y == u && (z2 = 0, A2 = 1, "d" == e.side || "u" == e.side) && (D = 0, B = 1));
          k2 = [h[0], h[1], h[2], h[0] * s2 + h[3] * I, h[1] * t + h[4] * y, h[2] * D + h[5] * B, h[0] * s2 + h[6] * I, h[1] * z2 + h[7] * A2, h[2] * D + h[8] * B, h[0] * t + h[9] * y, h[1] * z2 + h[10] * A2, h[2] * D + h[11] * B];
          k2 = new ka(k2, e.side, e.level + 1, 2 * e.x, 2 * e.y, m.fullpath);
          d.push(k2);
          e.x == u && x <= m.tileResolution || (k2 = [h[0] * s2 + h[3] * I, h[1] * t + h[4] * y, h[2] * D + h[5] * B, h[3], h[4], h[5], h[3] * t + h[6] * y, h[4] * z2 + h[7] * A2, h[5] * D + h[8] * B, h[0] * s2 + h[6] * I, h[1] * z2 + h[7] * A2, h[2] * D + h[8] * B], k2 = new ka(k2, e.side, e.level + 1, 2 * e.x + 1, 2 * e.y, m.fullpath), d.push(k2));
          e.x == u && x <= m.tileResolution || e.y == u && x <= m.tileResolution || (k2 = [h[0] * s2 + h[6] * I, h[1] * z2 + h[7] * A2, h[2] * D + h[8] * B, h[3] * t + h[6] * y, h[4] * z2 + h[7] * A2, h[5] * D + h[8] * B, h[6], h[7], h[8], h[9] * s2 + h[6] * I, h[10] * t + h[7] * y, h[11] * D + h[8] * B], k2 = new ka(k2, e.side, e.level + 1, 2 * e.x + 1, 2 * e.y + 1, m.fullpath), d.push(k2));
          e.y == u && x <= m.tileResolution || (k2 = [h[0] * t + h[9] * y, h[1] * z2 + h[10] * A2, h[2] * D + h[11] * B, h[0] * s2 + h[6] * I, h[1] * z2 + h[7] * A2, h[2] * D + h[8] * B, h[9] * s2 + h[6] * I, h[10] * t + h[7] * y, h[11] * D + h[8] * B, h[9], h[10], h[11]], k2 = new ka(k2, e.side, e.level + 1, 2 * e.x, 2 * e.y + 1, m.fullpath), d.push(k2));
          for (e = 0; e < d.length; e++) Ja(a2, d[e], g2, p2, l);
        }
      }
    }
    function ta() {
      return [-1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1];
    }
    function ua(a2, e, c2) {
      var g2 = Math.sin(e);
      e = Math.cos(e);
      if ("x" == c2) return [a2[0], e * a2[1] + g2 * a2[2], e * a2[2] - g2 * a2[1], a2[3], e * a2[4] + g2 * a2[5], e * a2[5] - g2 * a2[4], a2[6], e * a2[7] + g2 * a2[8], e * a2[8] - g2 * a2[7]];
      if ("y" == c2) return [e * a2[0] - g2 * a2[2], a2[1], e * a2[2] + g2 * a2[0], e * a2[3] - g2 * a2[5], a2[4], e * a2[5] + g2 * a2[3], e * a2[6] - g2 * a2[8], a2[7], e * a2[8] + g2 * a2[6]];
      if ("z" == c2) return [e * a2[0] + g2 * a2[1], e * a2[1] - g2 * a2[0], a2[2], e * a2[3] + g2 * a2[4], e * a2[4] - g2 * a2[3], a2[5], e * a2[6] + g2 * a2[7], e * a2[7] - g2 * a2[6], a2[8]];
    }
    function ma(a2) {
      return [a2[0], a2[4], a2[8], a2[12], a2[1], a2[5], a2[9], a2[13], a2[2], a2[6], a2[10], a2[14], a2[3], a2[7], a2[11], a2[15]];
    }
    function Ka(a2) {
      La(
        a2,
        a2.path + "." + m.extension,
        function(e, c2) {
          a2.texture = e;
          a2.textureLoaded = c2 ? 2 : 1;
        },
        va.crossOrigin
      );
    }
    function la(a2, e) {
      var c2 = [a2[0] * e[0] + a2[1] * e[1] + a2[2] * e[2], a2[4] * e[0] + a2[5] * e[1] + a2[6] * e[2], a2[11] + a2[8] * e[0] + a2[9] * e[1] + a2[10] * e[2], 1 / (a2[12] * e[0] + a2[13] * e[1] + a2[14] * e[2])], g2 = c2[0] * c2[3], l = c2[1] * c2[3], c2 = c2[2] * c2[3], h = [0, 0, 0];
      -1 > g2 && (h[0] = -1);
      1 < g2 && (h[0] = 1);
      -1 > l && (h[1] = -1);
      1 < l && (h[1] = 1);
      if (-1 > c2 || 1 < c2) h[2] = 1;
      return h;
    }
    function Ea() {
      console.log("Reducing canvas size due to error 1286!");
      A.width = Math.round(A.width / 2);
      A.height = Math.round(A.height / 2);
    }
    var A = g.createElement("canvas");
    A.style.width = A.style.height = "100%";
    K.appendChild(A);
    var c, a, U, V, $, R, wa, ga, m, z, F, ca, Fa, Y, na, va;
    this.init = function(L, e, Ca, H, l, h, d, u) {
      function x(a2) {
        if (E2) {
          var e2 = a2 * a2 * 4, h2 = new Uint8ClampedArray(e2), c2 = u.backgroundColor ? u.backgroundColor : [0, 0, 0];
          c2[0] *= 255;
          c2[1] *= 255;
          c2[2] *= 255;
          for (var b = 0; b < e2; b++) h2[b++] = c2[0], h2[b++] = c2[1], h2[b++] = c2[2];
          a2 = new ImageData(h2, a2, a2);
          for (t = 0; 6 > t; t++) 0 == m[t].width && (m[t] = a2);
        }
      }
      e === p && (e = "equirectangular");
      if ("equirectangular" != e && "cubemap" != e && "multires" != e) throw console.log("Error: invalid image type specified!"), { type: "config error" };
      z = e;
      m = L;
      F = Ca;
      va = u || {};
      if (c) {
        U && (a.detachShader(c, U), a.deleteShader(U));
        V && (a.detachShader(c, V), a.deleteShader(V));
        a.bindBuffer(a.ARRAY_BUFFER, null);
        a.bindBuffer(a.ELEMENT_ARRAY_BUFFER, null);
        c.texture && a.deleteTexture(c.texture);
        if (c.nodeCache) for (L = 0; L < c.nodeCache.length; L++) a.deleteTexture(c.nodeCache[L].texture);
        a.deleteProgram(c);
        c = p;
      }
      ga = p;
      var t, E2 = false, y;
      if ("cubemap" == z) for (t = 0; 6 > t; t++) 0 < m[t].width ? (y === p && (y = m[t].width), y != m[t].width && console.log("Cube faces have inconsistent widths: " + y + " vs. " + m[t].width)) : E2 = true;
      "cubemap" == z && 0 !== (y & y - 1) && (navigator.userAgent.toLowerCase().match(/(iphone|ipod|ipad).* os 8_/) || navigator.userAgent.toLowerCase().match(/(iphone|ipod|ipad).* os 9_/) || navigator.userAgent.toLowerCase().match(/(iphone|ipod|ipad).* os 10_/) || navigator.userAgent.match(/Trident.*rv[ :]*11\./)) || (a || (a = A.getContext("experimental-webgl", { alpha: false, depth: false })), a && 1286 == a.getError() && Ea());
      if (!a && ("multires" == z && m.hasOwnProperty("fallbackPath") || "cubemap" == z) && ("WebkitAppearance" in g.documentElement.style || navigator.userAgent.match(/Trident.*rv[ :]*11\./) || -1 !== navigator.appVersion.indexOf("MSIE 10"))) {
        R && K.removeChild(R);
        R = g.createElement("div");
        R.className = "pnlm-world";
        H = m.basePath ? m.basePath + m.fallbackPath : m.fallbackPath;
        var Q2 = "frblud".split(""), S2 = 0;
        l = function() {
          var a2 = g.createElement("canvas");
          a2.className = "pnlm-face pnlm-" + Q2[this.side] + "face";
          R.appendChild(a2);
          var e2 = a2.getContext("2d");
          a2.style.width = this.width + 4 + "px";
          a2.style.height = this.height + 4 + "px";
          a2.width = this.width + 4;
          a2.height = this.height + 4;
          e2.drawImage(this, 2, 2);
          var h2 = e2.getImageData(0, 0, a2.width, a2.height), c2 = h2.data, b, d2;
          for (b = 2; b < a2.width - 2; b++) for (d2 = 0; 4 > d2; d2++) c2[4 * (b + a2.width) + d2] = c2[4 * (b + 2 * a2.width) + d2], c2[4 * (b + a2.width * (a2.height - 2)) + d2] = c2[4 * (b + a2.width * (a2.height - 3)) + d2];
          for (b = 2; b < a2.height - 2; b++) for (d2 = 0; 4 > d2; d2++) c2[4 * (b * a2.width + 1) + d2] = c2[4 * (b * a2.width + 2) + d2], c2[4 * ((b + 1) * a2.width - 2) + d2] = c2[4 * ((b + 1) * a2.width - 3) + d2];
          for (d2 = 0; 4 > d2; d2++) c2[4 * (a2.width + 1) + d2] = c2[4 * (2 * a2.width + 2) + d2], c2[4 * (2 * a2.width - 2) + d2] = c2[4 * (3 * a2.width - 3) + d2], c2[4 * (a2.width * (a2.height - 2) + 1) + d2] = c2[4 * (a2.width * (a2.height - 3) + 2) + d2], c2[4 * (a2.width * (a2.height - 1) - 2) + d2] = c2[4 * (a2.width * (a2.height - 2) - 3) + d2];
          for (b = 1; b < a2.width - 1; b++) for (d2 = 0; 4 > d2; d2++) c2[4 * b + d2] = c2[4 * (b + a2.width) + d2], c2[4 * (b + a2.width * (a2.height - 1)) + d2] = c2[4 * (b + a2.width * (a2.height - 2)) + d2];
          for (b = 1; b < a2.height - 1; b++) for (d2 = 0; 4 > d2; d2++) c2[b * a2.width * 4 + d2] = c2[4 * (b * a2.width + 1) + d2], c2[4 * ((b + 1) * a2.width - 1) + d2] = c2[4 * ((b + 1) * a2.width - 2) + d2];
          for (d2 = 0; 4 > d2; d2++) c2[d2] = c2[4 * (a2.width + 1) + d2], c2[4 * (a2.width - 1) + d2] = c2[4 * (2 * a2.width - 2) + d2], c2[a2.width * (a2.height - 1) * 4 + d2] = c2[4 * (a2.width * (a2.height - 2) + 1) + d2], c2[4 * (a2.width * a2.height - 1) + d2] = c2[4 * (a2.width * (a2.height - 1) - 2) + d2];
          e2.putImageData(h2, 0, 0);
          D.call(this);
        };
        var D = function() {
          0 < this.width ? ($ === p && ($ = this.width), $ != this.width && console.log("Fallback faces have inconsistent widths: " + $ + " vs. " + this.width)) : E2 = true;
          S2++;
          6 == S2 && ($ = this.width, K.appendChild(R), d());
        }, E2 = false;
        for (t = 0; 6 > t; t++) h = new Image(), h.crossOrigin = va.crossOrigin ? va.crossOrigin : "anonymous", h.side = t, h.onload = l, h.onerror = D, h.src = "multires" == z ? H.replace("%s", Q2[t]) + "." + m.extension : m[t].src;
        x($);
      } else {
        if (!a) throw console.log("Error: no WebGL support detected!"), { type: "no webgl" };
        "cubemap" == z && x(y);
        m.fullpath = m.basePath ? m.basePath + m.path : m.path;
        m.invTileResolution = 1 / m.tileResolution;
        L = ta();
        wa = [];
        for (t = 0; 6 > t; t++) wa[t] = L.slice(12 * t, 12 * t + 12), L = ta();
        L = 0;
        if ("equirectangular" == z) {
          if (L = a.getParameter(a.MAX_TEXTURE_SIZE), Math.max(m.width / 2, m.height) > L) throw console.log("Error: The image is too big; it's " + m.width + "px wide, but this device's maximum supported size is " + 2 * L + "px."), { type: "webgl size error", width: m.width, maxWidth: 2 * L };
        } else if ("cubemap" == z && y > a.getParameter(a.MAX_CUBE_MAP_TEXTURE_SIZE)) throw console.log("Error: The image is too big; it's " + y + "px wide, but this device's maximum supported size is " + L + "px."), { type: "webgl size error", width: y, maxWidth: L };
        u === p || u.horizonPitch === p && u.horizonRoll === p || (ga = [u.horizonPitch == p ? 0 : u.horizonPitch, u.horizonRoll == p ? 0 : u.horizonRoll]);
        y = a.TEXTURE_2D;
        a.viewport(0, 0, a.drawingBufferWidth, a.drawingBufferHeight);
        a.getShaderPrecisionFormat && (e = a.getShaderPrecisionFormat(a.FRAGMENT_SHADER, a.HIGH_FLOAT)) && 1 > e.precision && (oa = oa.replace("highp", "mediump"));
        U = a.createShader(a.VERTEX_SHADER);
        e = s;
        "multires" == z && (e = k);
        a.shaderSource(U, e);
        a.compileShader(U);
        V = a.createShader(a.FRAGMENT_SHADER);
        e = pa;
        "cubemap" == z ? (y = a.TEXTURE_CUBE_MAP, e = qa) : "multires" == z && (e = bb);
        a.shaderSource(V, e);
        a.compileShader(V);
        c = a.createProgram();
        a.attachShader(c, U);
        a.attachShader(c, V);
        a.linkProgram(c);
        a.getShaderParameter(U, a.COMPILE_STATUS) || console.log(a.getShaderInfoLog(U));
        a.getShaderParameter(V, a.COMPILE_STATUS) || console.log(a.getShaderInfoLog(V));
        a.getProgramParameter(c, a.LINK_STATUS) || console.log(a.getProgramInfoLog(c));
        a.useProgram(c);
        c.drawInProgress = false;
        e = u.backgroundColor ? u.backgroundColor : [0, 0, 0];
        a.clearColor(e[0], e[1], e[2], 1);
        a.clear(a.COLOR_BUFFER_BIT);
        c.texCoordLocation = a.getAttribLocation(c, "a_texCoord");
        a.enableVertexAttribArray(c.texCoordLocation);
        "multires" != z ? (ca || (ca = a.createBuffer()), a.bindBuffer(a.ARRAY_BUFFER, ca), a.bufferData(a.ARRAY_BUFFER, new Float32Array([-1, 1, 1, 1, 1, -1, -1, 1, 1, -1, -1, -1]), a.STATIC_DRAW), a.vertexAttribPointer(c.texCoordLocation, 2, a.FLOAT, false, 0, 0), c.aspectRatio = a.getUniformLocation(c, "u_aspectRatio"), a.uniform1f(c.aspectRatio, a.drawingBufferWidth / a.drawingBufferHeight), c.psi = a.getUniformLocation(c, "u_psi"), c.theta = a.getUniformLocation(c, "u_theta"), c.f = a.getUniformLocation(c, "u_f"), c.h = a.getUniformLocation(c, "u_h"), c.v = a.getUniformLocation(c, "u_v"), c.vo = a.getUniformLocation(c, "u_vo"), c.rot = a.getUniformLocation(c, "u_rot"), a.uniform1f(c.h, H / (2 * Math.PI)), a.uniform1f(c.v, l / Math.PI), a.uniform1f(c.vo, h / Math.PI * 2), "equirectangular" == z && (c.backgroundColor = a.getUniformLocation(c, "u_backgroundColor"), a.uniform4fv(
          c.backgroundColor,
          e.concat([1])
        )), c.texture = a.createTexture(), a.bindTexture(y, c.texture), "cubemap" == z ? (a.texImage2D(a.TEXTURE_CUBE_MAP_POSITIVE_X, 0, a.RGB, a.RGB, a.UNSIGNED_BYTE, m[1]), a.texImage2D(a.TEXTURE_CUBE_MAP_NEGATIVE_X, 0, a.RGB, a.RGB, a.UNSIGNED_BYTE, m[3]), a.texImage2D(a.TEXTURE_CUBE_MAP_POSITIVE_Y, 0, a.RGB, a.RGB, a.UNSIGNED_BYTE, m[4]), a.texImage2D(a.TEXTURE_CUBE_MAP_NEGATIVE_Y, 0, a.RGB, a.RGB, a.UNSIGNED_BYTE, m[5]), a.texImage2D(a.TEXTURE_CUBE_MAP_POSITIVE_Z, 0, a.RGB, a.RGB, a.UNSIGNED_BYTE, m[0]), a.texImage2D(
          a.TEXTURE_CUBE_MAP_NEGATIVE_Z,
          0,
          a.RGB,
          a.RGB,
          a.UNSIGNED_BYTE,
          m[2]
        )) : m.width <= L ? (a.uniform1i(a.getUniformLocation(c, "u_splitImage"), 0), a.texImage2D(y, 0, a.RGB, a.RGB, a.UNSIGNED_BYTE, m)) : (a.uniform1i(a.getUniformLocation(c, "u_splitImage"), 1), H = g.createElement("canvas"), H.width = m.width / 2, H.height = m.height, H = H.getContext("2d"), H.drawImage(m, 0, 0), l = H.getImageData(0, 0, m.width / 2, m.height), a.texImage2D(y, 0, a.RGB, a.RGB, a.UNSIGNED_BYTE, l), c.texture2 = a.createTexture(), a.activeTexture(a.TEXTURE1), a.bindTexture(y, c.texture2), a.uniform1i(a.getUniformLocation(
          c,
          "u_image1"
        ), 1), H.drawImage(m, -m.width / 2, 0), l = H.getImageData(0, 0, m.width / 2, m.height), a.texImage2D(y, 0, a.RGB, a.RGB, a.UNSIGNED_BYTE, l), a.texParameteri(y, a.TEXTURE_WRAP_S, a.CLAMP_TO_EDGE), a.texParameteri(y, a.TEXTURE_WRAP_T, a.CLAMP_TO_EDGE), a.texParameteri(y, a.TEXTURE_MIN_FILTER, a.LINEAR), a.texParameteri(y, a.TEXTURE_MAG_FILTER, a.LINEAR), a.activeTexture(a.TEXTURE0)), a.texParameteri(y, a.TEXTURE_WRAP_S, a.CLAMP_TO_EDGE), a.texParameteri(y, a.TEXTURE_WRAP_T, a.CLAMP_TO_EDGE), a.texParameteri(
          y,
          a.TEXTURE_MIN_FILTER,
          a.LINEAR
        ), a.texParameteri(y, a.TEXTURE_MAG_FILTER, a.LINEAR)) : (c.vertPosLocation = a.getAttribLocation(c, "a_vertCoord"), a.enableVertexAttribArray(c.vertPosLocation), Fa || (Fa = a.createBuffer()), Y || (Y = a.createBuffer()), na || (na = a.createBuffer()), a.bindBuffer(a.ARRAY_BUFFER, Y), a.bufferData(a.ARRAY_BUFFER, new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]), a.STATIC_DRAW), a.bindBuffer(a.ELEMENT_ARRAY_BUFFER, na), a.bufferData(a.ELEMENT_ARRAY_BUFFER, new Uint16Array([0, 1, 2, 0, 2, 3]), a.STATIC_DRAW), c.perspUniform = a.getUniformLocation(
          c,
          "u_perspMatrix"
        ), c.cubeUniform = a.getUniformLocation(c, "u_cubeMatrix"), c.level = -1, c.currentNodes = [], c.nodeCache = [], c.nodeCacheTimestamp = 0);
        H = a.getError();
        if (0 !== H) throw console.log("Error: Something went wrong with WebGL!", H), { type: "webgl error" };
        d();
      }
    };
    this.destroy = function() {
      K !== p && (A !== p && K.contains(A) && K.removeChild(A), R !== p && K.contains(R) && K.removeChild(R));
      if (a) {
        var c2 = a.getExtension("WEBGL_lose_context");
        c2 && c2.loseContext();
      }
    };
    this.resize = function() {
      var g2 = E.devicePixelRatio || 1;
      A.width = A.clientWidth * g2;
      A.height = A.clientHeight * g2;
      a && (1286 == a.getError() && Ea(), a.viewport(0, 0, a.drawingBufferWidth, a.drawingBufferHeight), "multires" != z && a.uniform1f(c.aspectRatio, A.clientWidth / A.clientHeight));
    };
    this.resize();
    this.setPose = function(a2, c2) {
      ga = [a2, c2];
    };
    this.render = function(g2, e, k2, s2) {
      var l, h = 0;
      s2 === p && (s2 = {});
      s2.roll && (h = s2.roll);
      if (ga !== p) {
        l = ga[0];
        var d = ga[1], u = g2, x = e, t = Math.cos(d) * Math.sin(g2) * Math.sin(l) + Math.cos(g2) * (Math.cos(l) * Math.cos(e) + Math.sin(d) * Math.sin(l) * Math.sin(e)), E2 = -Math.sin(g2) * Math.sin(d) + Math.cos(g2) * Math.cos(d) * Math.sin(e);
        g2 = Math.cos(d) * Math.cos(l) * Math.sin(g2) + Math.cos(g2) * (-Math.cos(e) * Math.sin(l) + Math.cos(l) * Math.sin(d) * Math.sin(e));
        g2 = Math.asin(Math.max(Math.min(g2, 1), -1));
        e = Math.atan2(E2, t);
        l = [Math.cos(u) * (Math.sin(d) * Math.sin(l) * Math.cos(x) - Math.cos(l) * Math.sin(x)), Math.cos(u) * Math.cos(d) * Math.cos(x), Math.cos(u) * (Math.cos(l) * Math.sin(d) * Math.cos(x) + Math.sin(x) * Math.sin(l))];
        d = [-Math.cos(g2) * Math.sin(e), Math.cos(g2) * Math.cos(e)];
        d = Math.acos(Math.max(Math.min((l[0] * d[0] + l[1] * d[1]) / (Math.sqrt(l[0] * l[0] + l[1] * l[1] + l[2] * l[2]) * Math.sqrt(d[0] * d[0] + d[1] * d[1])), 1), -1));
        0 > l[2] && (d = 2 * Math.PI - d);
        h += d;
      }
      if (a || "multires" != z && "cubemap" != z) {
        if ("multires" != z) k2 = 2 * Math.atan(Math.tan(0.5 * k2) / (a.drawingBufferWidth / a.drawingBufferHeight)), k2 = 1 / Math.tan(0.5 * k2), a.uniform1f(c.psi, e), a.uniform1f(c.theta, g2), a.uniform1f(c.rot, h), a.uniform1f(c.f, k2), true === F && "equirectangular" == z && (a.bindTexture(a.TEXTURE_2D, c.texture), a.texImage2D(a.TEXTURE_2D, 0, a.RGB, a.RGB, a.UNSIGNED_BYTE, m)), a.drawArrays(a.TRIANGLES, 0, 6);
        else {
          l = a.drawingBufferWidth / a.drawingBufferHeight;
          d = 2 * Math.atan(Math.tan(k2 / 2) * a.drawingBufferHeight / a.drawingBufferWidth);
          d = 1 / Math.tan(d / 2);
          l = [d / l, 0, 0, 0, 0, d, 0, 0, 0, 0, 100.1 / -99.9, 20 / -99.9, 0, 0, -1, 0];
          for (d = 1; d < m.maxLevel && a.drawingBufferWidth > m.tileResolution * Math.pow(2, d - 1) * Math.tan(k2 / 2) * 0.707; ) d++;
          c.level = d;
          d = [1, 0, 0, 0, 1, 0, 0, 0, 1];
          d = ua(d, -h, "z");
          d = ua(d, -g2, "x");
          d = ua(d, e, "y");
          d = [d[0], d[1], d[2], 0, d[3], d[4], d[5], 0, d[6], d[7], d[8], 0, 0, 0, 0, 1];
          a.uniformMatrix4fv(c.perspUniform, false, new Float32Array(ma(l)));
          a.uniformMatrix4fv(
            c.cubeUniform,
            false,
            new Float32Array(ma(d))
          );
          h = [l[0] * d[0], l[0] * d[1], l[0] * d[2], 0, l[5] * d[4], l[5] * d[5], l[5] * d[6], 0, l[10] * d[8], l[10] * d[9], l[10] * d[10], l[11], -d[8], -d[9], -d[10], 0];
          c.nodeCache.sort(ja);
          if (200 < c.nodeCache.length && c.nodeCache.length > c.currentNodes.length + 50) for (l = c.nodeCache.splice(200, c.nodeCache.length - 200), d = 0; d < l.length; d++) a.deleteTexture(l[d].texture);
          c.currentNodes = [];
          d = "fbudlr".split("");
          for (l = 0; 6 > l; l++) u = new ka(wa[l], d[l], 1, 0, 0, m.fullpath), Ja(h, u, g2, e, k2);
          c.currentNodes.sort(Q);
          for (g2 = S.length - 1; 0 <= g2; g2--) -1 === c.currentNodes.indexOf(S[g2].node) && (S[g2].node.textureLoad = false, S.splice(g2, 1));
          if (0 === S.length) {
            for (g2 = 0; g2 < c.currentNodes.length; g2++) if (e = c.currentNodes[g2], !e.texture && !e.textureLoad) {
              e.textureLoad = true;
              setTimeout(Ka, 0, e);
              break;
            }
          }
          if (!c.drawInProgress) {
            c.drawInProgress = true;
            a.clear(a.COLOR_BUFFER_BIT);
            for (g2 = 0; g2 < c.currentNodes.length; g2++) 1 < c.currentNodes[g2].textureLoaded && (a.bindBuffer(a.ARRAY_BUFFER, Fa), a.bufferData(a.ARRAY_BUFFER, new Float32Array(c.currentNodes[g2].vertices), a.STATIC_DRAW), a.vertexAttribPointer(
              c.vertPosLocation,
              3,
              a.FLOAT,
              false,
              0,
              0
            ), a.bindBuffer(a.ARRAY_BUFFER, Y), a.vertexAttribPointer(c.texCoordLocation, 2, a.FLOAT, false, 0, 0), a.bindTexture(a.TEXTURE_2D, c.currentNodes[g2].texture), a.drawElements(a.TRIANGLES, 6, a.UNSIGNED_SHORT, 0));
            c.drawInProgress = false;
          }
        }
        if (s2.returnImage !== p) return A.toDataURL("image/png");
      } else for (l = $ / 2, s2 = {
        f: "translate3d(-" + (l + 2) + "px, -" + (l + 2) + "px, -" + l + "px)",
        b: "translate3d(" + (l + 2) + "px, -" + (l + 2) + "px, " + l + "px) rotateX(180deg) rotateZ(180deg)",
        u: "translate3d(-" + (l + 2) + "px, -" + l + "px, " + (l + 2) + "px) rotateX(270deg)",
        d: "translate3d(-" + (l + 2) + "px, " + l + "px, -" + (l + 2) + "px) rotateX(90deg)",
        l: "translate3d(-" + l + "px, -" + (l + 2) + "px, " + (l + 2) + "px) rotateX(180deg) rotateY(90deg) rotateZ(180deg)",
        r: "translate3d(" + l + "px, -" + (l + 2) + "px, -" + (l + 2) + "px) rotateY(270deg)"
      }, k2 = 1 / Math.tan(k2 / 2), k2 = k2 * A.clientWidth / 2 + "px", e = "perspective(" + k2 + ") translateZ(" + k2 + ") rotateX(" + g2 + "rad) rotateY(" + e + "rad) ", k2 = Object.keys(s2), g2 = 0; 6 > g2; g2++) if (h = R.querySelector(".pnlm-" + k2[g2] + "face")) h.style.webkitTransform = e + s2[k2[g2]], h.style.transform = e + s2[k2[g2]];
    };
    this.isLoading = function() {
      if (a && "multires" == z) {
        for (var g2 = 0; g2 < c.currentNodes.length; g2++) if (!c.currentNodes[g2].textureLoaded) return true;
      }
      return false;
    };
    this.getCanvas = function() {
      return A;
    };
    var S = [], La = function() {
      function c2() {
        var d = this;
        this.texture = this.callback = null;
        this.image = new Image();
        this.image.crossOrigin = l ? l : "anonymous";
        var e2 = function() {
          if (0 < d.image.width && 0 < d.image.height) {
            var c3 = d.image;
            a.bindTexture(a.TEXTURE_2D, d.texture);
            a.texImage2D(a.TEXTURE_2D, 0, a.RGB, a.RGB, a.UNSIGNED_BYTE, c3);
            a.texParameteri(
              a.TEXTURE_2D,
              a.TEXTURE_MAG_FILTER,
              a.LINEAR
            );
            a.texParameteri(a.TEXTURE_2D, a.TEXTURE_MIN_FILTER, a.LINEAR);
            a.texParameteri(a.TEXTURE_2D, a.TEXTURE_WRAP_S, a.CLAMP_TO_EDGE);
            a.texParameteri(a.TEXTURE_2D, a.TEXTURE_WRAP_T, a.CLAMP_TO_EDGE);
            a.bindTexture(a.TEXTURE_2D, null);
            d.callback(d.texture, true);
          } else d.callback(d.texture, false);
          S.length ? (c3 = S.shift(), d.loadTexture(c3.src, c3.texture, c3.callback)) : k2[g2++] = d;
        };
        this.image.addEventListener("load", e2);
        this.image.addEventListener("error", e2);
      }
      function e(a2, c3, e2, g3) {
        this.node = a2;
        this.src = c3;
        this.texture = e2;
        this.callback = g3;
      }
      var g2 = 4, k2 = {}, l;
      c2.prototype.loadTexture = function(a2, c3, e2) {
        this.texture = c3;
        this.callback = e2;
        this.image.src = a2;
      };
      for (var h = 0; h < g2; h++) k2[h] = new c2();
      return function(c3, h2, m2, p2) {
        l = p2;
        p2 = a.createTexture();
        g2 ? k2[--g2].loadTexture(h2, p2, m2) : S.push(new e(c3, h2, p2, m2));
        return p2;
      };
    }();
  }
  var s = "attribute vec2 a_texCoord;varying vec2 v_texCoord;void main() {gl_Position = vec4(a_texCoord, 0.0, 1.0);v_texCoord = a_texCoord;}", k = "attribute vec3 a_vertCoord;attribute vec2 a_texCoord;uniform mat4 u_cubeMatrix;uniform mat4 u_perspMatrix;varying mediump vec2 v_texCoord;void main(void) {gl_Position = u_perspMatrix * u_cubeMatrix * vec4(a_vertCoord, 1.0);v_texCoord = a_texCoord;}", oa = "precision highp float;\nuniform float u_aspectRatio;\nuniform float u_psi;\nuniform float u_theta;\nuniform float u_f;\nuniform float u_h;\nuniform float u_v;\nuniform float u_vo;\nuniform float u_rot;\nconst float PI = 3.14159265358979323846264;\nuniform sampler2D u_image0;\nuniform sampler2D u_image1;\nuniform bool u_splitImage;\nuniform samplerCube u_imageCube;\nvarying vec2 v_texCoord;\nuniform vec4 u_backgroundColor;\nvoid main() {\nfloat x = v_texCoord.x * u_aspectRatio;\nfloat y = v_texCoord.y;\nfloat sinrot = sin(u_rot);\nfloat cosrot = cos(u_rot);\nfloat rot_x = x * cosrot - y * sinrot;\nfloat rot_y = x * sinrot + y * cosrot;\nfloat sintheta = sin(u_theta);\nfloat costheta = cos(u_theta);\nfloat a = u_f * costheta - rot_y * sintheta;\nfloat root = sqrt(rot_x * rot_x + a * a);\nfloat lambda = atan(rot_x / root, a / root) + u_psi;\nfloat phi = atan((rot_y * costheta + u_f * sintheta) / root);", qa = oa + "float cosphi = cos(phi);\ngl_FragColor = textureCube(u_imageCube, vec3(cosphi*sin(lambda), sin(phi), cosphi*cos(lambda)));\n}", pa = oa + "lambda = mod(lambda + PI, PI * 2.0) - PI;\nvec2 coord = vec2(lambda / PI, phi / (PI / 2.0));\nif(coord.x < -u_h || coord.x > u_h || coord.y < -u_v + u_vo || coord.y > u_v + u_vo)\ngl_FragColor = u_backgroundColor;\nelse {\nif(u_splitImage) {\nif(coord.x < 0.0)\ngl_FragColor = texture2D(u_image0, vec2((coord.x + u_h) / u_h, (-coord.y + u_v + u_vo) / (u_v * 2.0)));\nelse\ngl_FragColor = texture2D(u_image1, vec2((coord.x + u_h) / u_h - 1.0, (-coord.y + u_v + u_vo) / (u_v * 2.0)));\n} else {\ngl_FragColor = texture2D(u_image0, vec2((coord.x + u_h) / (u_h * 2.0), (-coord.y + u_v + u_vo) / (u_v * 2.0)));\n}\n}\n}", bb = "varying mediump vec2 v_texCoord;uniform sampler2D u_sampler;void main(void) {gl_FragColor = texture2D(u_sampler, v_texCoord);}";
  return { renderer: function(g2, k2, p2, s2) {
    return new Ba(g2, k2, p2, s2);
  } };
}(window, document);
window.pannellum = /* @__PURE__ */ function(E, g, p) {
  function Ba(s, k) {
    function oa() {
      var a2 = g.createElement("div");
      a2.innerHTML = "<!--[if lte IE 9]><i></i><![endif]-->";
      if (1 == a2.getElementsByTagName("i").length) K();
      else {
        ra = b.hfov;
        Ga = b.pitch;
        var f;
        if ("cubemap" == b.type) {
          P = [];
          for (a2 = 0; 6 > a2; a2++) P.push(new Image()), P[a2].crossOrigin = b.crossOrigin;
          q.load.lbox.style.display = "block";
          q.load.lbar.style.display = "none";
        } else if ("multires" == b.type) a2 = JSON.parse(JSON.stringify(b.multiRes)), b.basePath && b.multiRes.basePath && !/^(?:[a-z]+:)?\/\//i.test(b.multiRes.basePath) ? a2.basePath = b.basePath + b.multiRes.basePath : b.multiRes.basePath ? a2.basePath = b.multiRes.basePath : b.basePath && (a2.basePath = b.basePath), P = a2;
        else if (true === b.dynamic) P = b.panorama;
        else {
          if (b.panorama === p) {
            K(b.strings.noPanoramaError);
            return;
          }
          P = new Image();
        }
        if ("cubemap" == b.type) for (var n = 6, c2 = function() {
          n--;
          0 === n && pa();
        }, d2 = function(a3) {
          var ea = g.createElement("a");
          ea.href = a3.target.src;
          ea.textContent = ea.href;
          K(b.strings.fileAccessError.replace("%s", ea.outerHTML));
        }, a2 = 0; a2 < P.length; a2++) f = b.cubeMap[a2], "null" == f ? (console.log("Will use background instead of missing cubemap face " + a2), c2()) : (b.basePath && !qa(f) && (f = b.basePath + f), P[a2].onload = c2, P[a2].onerror = d2, P[a2].src = I(f));
        else if ("multires" == b.type) pa();
        else if (f = "", b.basePath && (f = b.basePath), true !== b.dynamic) {
          f = qa(b.panorama) ? b.panorama : f + b.panorama;
          P.onload = function() {
            E.URL.revokeObjectURL(this.src);
            pa();
          };
          var e2 = new XMLHttpRequest();
          e2.onloadend = function() {
            if (200 != e2.status) {
              var a3 = g.createElement("a");
              a3.href = f;
              a3.textContent = a3.href;
              K(b.strings.fileAccessError.replace("%s", a3.outerHTML));
            }
            Ba2(this.response);
            q.load.msg.innerHTML = "";
          };
          e2.onprogress = function(a3) {
            if (a3.lengthComputable) {
              q.load.lbarFill.style.width = a3.loaded / a3.total * 100 + "%";
              var b2, ea;
              1e6 < a3.total ? (b2 = "MB", ea = (a3.loaded / 1e6).toFixed(2), a3 = (a3.total / 1e6).toFixed(2)) : 1e3 < a3.total ? (b2 = "kB", ea = (a3.loaded / 1e3).toFixed(1), a3 = (a3.total / 1e3).toFixed(1)) : (b2 = "B", ea = a3.loaded, a3 = a3.total);
              q.load.msg.innerHTML = ea + " / " + a3 + " " + b2;
            } else q.load.lbox.style.display = "block", q.load.lbar.style.display = "none";
          };
          try {
            e2.open("GET", f, true);
          } catch (h2) {
            K(b.strings.malformedURLError);
          }
          e2.responseType = "blob";
          e2.setRequestHeader(
            "Accept",
            "image/*,*/*;q=0.9"
          );
          e2.withCredentials = "use-credentials" === b.crossOrigin;
          e2.send();
        }
        b.draggable && J.classList.add("pnlm-grab");
        J.classList.remove("pnlm-grabbing");
        Ma = true === b.dynamicUpdate;
        b.dynamic && Ma && (P = b.panorama, pa());
      }
    }
    function qa(a2) {
      return /^(?:[a-z]+:)?\/\//i.test(a2) || "/" == a2[0] || "blob:" == a2.slice(0, 5);
    }
    function pa() {
      C || (C = new libpannellum.renderer(M));
      Sa || (Sa = true, W.addEventListener("mousedown", ka, false), g.addEventListener("mousemove", ua, false), g.addEventListener("mouseup", ma, false), b.mouseZoom && (J.addEventListener(
        "mousewheel",
        U,
        false
      ), J.addEventListener("DOMMouseScroll", U, false)), b.doubleClickZoom && W.addEventListener("dblclick", Ja, false), s.addEventListener("mozfullscreenchange", d, false), s.addEventListener("webkitfullscreenchange", d, false), s.addEventListener("msfullscreenchange", d, false), s.addEventListener("fullscreenchange", d, false), E.addEventListener("resize", z, false), E.addEventListener("orientationchange", z, false), b.disableKeyboardCtrl || (s.addEventListener("keydown", V, false), s.addEventListener("keyup", R, false), s.addEventListener("blur", $, false)), g.addEventListener(
        "mouseleave",
        ma,
        false
      ), "" === g.documentElement.style.pointerAction && "" === g.documentElement.style.touchAction ? (W.addEventListener("pointerdown", A, false), W.addEventListener("pointermove", c, false), W.addEventListener("pointerup", a, false), W.addEventListener("pointerleave", a, false)) : (W.addEventListener("touchstart", Ka, false), W.addEventListener("touchmove", la, false), W.addEventListener("touchend", Ea, false)), E.navigator.pointerEnabled && (s.style.touchAction = "none"));
      va();
      x(b.hfov);
      setTimeout(function() {
      }, 500);
    }
    function Ba2(a2) {
      var f = new FileReader();
      f.addEventListener("loadend", function() {
        var n = f.result;
        if (navigator.userAgent.toLowerCase().match(/(iphone|ipod|ipad).* os 8_/)) {
          var c2 = n.indexOf("ÿÂ");
          (0 > c2 || 65536 < c2) && K(b.strings.iOS8WebGLError);
        }
        c2 = n.indexOf("<x:xmpmeta");
        if (-1 < c2 && true !== b.ignoreGPanoXMP) {
          var d2 = n.substring(c2, n.indexOf("</x:xmpmeta>") + 12), e2 = function(a3) {
            var b2;
            0 <= d2.indexOf(a3 + '="') ? (b2 = d2.substring(d2.indexOf(a3 + '="') + a3.length + 2), b2 = b2.substring(0, b2.indexOf('"'))) : 0 <= d2.indexOf(a3 + ">") && (b2 = d2.substring(d2.indexOf(a3 + ">") + a3.length + 1), b2 = b2.substring(
              0,
              b2.indexOf("<")
            ));
            return b2 !== p ? Number(b2) : null;
          }, n = e2("GPano:FullPanoWidthPixels"), c2 = e2("GPano:CroppedAreaImageWidthPixels"), g2 = e2("GPano:FullPanoHeightPixels"), h2 = e2("GPano:CroppedAreaImageHeightPixels"), l2 = e2("GPano:CroppedAreaTopPixels"), k2 = e2("GPano:PoseHeadingDegrees"), m2 = e2("GPano:PosePitchDegrees"), e2 = e2("GPano:PoseRollDegrees");
          null !== n && null !== c2 && null !== g2 && null !== h2 && null !== l2 && (0 > aa.indexOf("haov") && (b.haov = c2 / n * 360), 0 > aa.indexOf("vaov") && (b.vaov = h2 / g2 * 180), 0 > aa.indexOf("vOffset") && (b.vOffset = -180 * ((l2 + h2 / 2) / g2 - 0.5)), null !== k2 && 0 > aa.indexOf("northOffset") && (b.northOffset = k2, false !== b.compass && (b.compass = true)), null !== m2 && null !== e2 && (0 > aa.indexOf("horizonPitch") && (b.horizonPitch = m2), 0 > aa.indexOf("horizonRoll") && (b.horizonRoll = e2)));
        }
        P.src = E.URL.createObjectURL(a2);
      });
      f.readAsBinaryString !== p ? f.readAsBinaryString(a2) : f.readAsText(a2);
    }
    function K(a2) {
      a2 === p && (a2 = b.strings.genericWebGLError);
      q.errorMsg.innerHTML = "<p>" + a2 + "</p>";
      v.load.style.display = "none";
      q.load.box.style.display = "none";
      q.errorMsg.style.display = "table";
      Na = true;
      G = p;
      M.style.display = "none";
      B("error", a2);
    }
    function ja(a2) {
      var b2 = Q(a2);
      fa.style.left = b2.x + "px";
      fa.style.top = b2.y + "px";
      clearTimeout(ja.t1);
      clearTimeout(ja.t2);
      fa.style.display = "block";
      fa.style.opacity = 1;
      ja.t1 = setTimeout(function() {
        fa.style.opacity = 0;
      }, 2e3);
      ja.t2 = setTimeout(function() {
        fa.style.display = "none";
      }, 2500);
      a2.preventDefault();
    }
    function Q(a2) {
      var b2 = s.getBoundingClientRect(), n = {};
      n.x = (a2.clientX || a2.pageX) - b2.left;
      n.y = (a2.clientY || a2.pageY) - b2.top;
      return n;
    }
    function ka(a2) {
      a2.preventDefault();
      s.focus();
      if (G && b.draggable) {
        var f = Q(a2);
        if (b.hotSpotDebug) {
          var n = ta(a2);
          console.log("Pitch: " + n[0] + ", Yaw: " + n[1] + ", Center Pitch: " + b.pitch + ", Center Yaw: " + b.yaw + ", HFOV: " + b.hfov);
        }
        t();
        Da();
        b.roll = 0;
        w.hfov = 0;
        ha = true;
        N = Date.now();
        xa = f.x;
        ya = f.y;
        Oa = b.yaw;
        Pa = b.pitch;
        J.classList.add("pnlm-grabbing");
        J.classList.remove("pnlm-grab");
        B("mousedown", a2);
        F();
      }
    }
    function Ja(a2) {
      b.minHfov === b.hfov ? da.setHfov(ra, 1e3) : (a2 = ta(a2), da.lookAt(a2[0], a2[1], b.minHfov, 1e3));
    }
    function ta(a2) {
      var f = Q(a2);
      a2 = C.getCanvas();
      var n = a2.clientWidth, c2 = a2.clientHeight;
      a2 = f.x / n * 2 - 1;
      var c2 = (1 - f.y / c2 * 2) * c2 / n, e2 = 1 / Math.tan(b.hfov * Math.PI / 360), d2 = Math.sin(b.pitch * Math.PI / 180), g2 = Math.cos(b.pitch * Math.PI / 180), f = e2 * g2 - c2 * d2, n = Math.sqrt(a2 * a2 + f * f), c2 = 180 * Math.atan((c2 * g2 + e2 * d2) / n) / Math.PI;
      a2 = 180 * Math.atan2(a2 / n, f / n) / Math.PI + b.yaw;
      -180 > a2 && (a2 += 360);
      180 < a2 && (a2 -= 360);
      return [c2, a2];
    }
    function ua(a2) {
      if (ha && G) {
        N = Date.now();
        var f = C.getCanvas(), n = f.clientWidth, f = f.clientHeight;
        a2 = Q(a2);
        var c2 = 180 * (Math.atan(xa / n * 2 - 1) - Math.atan(a2.x / n * 2 - 1)) / Math.PI * b.hfov / 90 + Oa;
        w.yaw = (c2 - b.yaw) % 360 * 0.2;
        b.yaw = c2;
        n = 360 * Math.atan(Math.tan(b.hfov / 360 * Math.PI) * f / n) / Math.PI;
        n = 180 * (Math.atan(a2.y / f * 2 - 1) - Math.atan(ya / f * 2 - 1)) / Math.PI * n / 90 + Pa;
        w.pitch = 0.2 * (n - b.pitch);
        b.pitch = n;
      }
    }
    function ma(a2) {
      ha && (ha = false, 15 < Date.now() - N && (w.pitch = w.yaw = 0), J.classList.add("pnlm-grab"), J.classList.remove("pnlm-grabbing"), N = Date.now(), B("mouseup", a2));
    }
    function Ka(a2) {
      if (G && b.draggable) {
        t();
        Da();
        b.roll = 0;
        w.hfov = 0;
        var f = Q(a2.targetTouches[0]);
        xa = f.x;
        ya = f.y;
        if (2 == a2.targetTouches.length) {
          var n = Q(a2.targetTouches[1]);
          xa += 0.5 * (n.x - f.x);
          ya += 0.5 * (n.y - f.y);
          Ha = Math.sqrt((f.x - n.x) * (f.x - n.x) + (f.y - n.y) * (f.y - n.y));
        }
        ha = true;
        N = Date.now();
        Oa = b.yaw;
        Pa = b.pitch;
        B("touchstart", a2);
        F();
      }
    }
    function la(a2) {
      if (b.draggable && (a2.preventDefault(), G && (N = Date.now()), ha && G)) {
        var f = Q(a2.targetTouches[0]), n = f.x, c2 = f.y;
        2 == a2.targetTouches.length && -1 != Ha && (a2 = Q(a2.targetTouches[1]), n += 0.5 * (a2.x - f.x), c2 += 0.5 * (a2.y - f.y), f = Math.sqrt((f.x - a2.x) * (f.x - a2.x) + (f.y - a2.y) * (f.y - a2.y)), x(b.hfov + 0.1 * (Ha - f)), Ha = f);
        f = b.hfov / 360 * b.touchPanSpeedCoeffFactor;
        n = (xa - n) * f + Oa;
        w.yaw = (n - b.yaw) % 360 * 0.2;
        b.yaw = n;
        c2 = (c2 - ya) * f + Pa;
        w.pitch = 0.2 * (c2 - b.pitch);
        b.pitch = c2;
      }
    }
    function Ea() {
      ha = false;
      150 < Date.now() - N && (w.pitch = w.yaw = 0);
      Ha = -1;
      N = Date.now();
      B("touchend", event);
    }
    function A(a2) {
      "touch" == a2.pointerType && G && b.draggable && (ia.push(a2.pointerId), za.push({ clientX: a2.clientX, clientY: a2.clientY }), a2.targetTouches = za, Ka(a2), a2.preventDefault());
    }
    function c(a2) {
      if ("touch" == a2.pointerType && b.draggable) {
        for (var f = 0; f < ia.length; f++) if (a2.pointerId == ia[f]) {
          za[f].clientX = a2.clientX;
          za[f].clientY = a2.clientY;
          a2.targetTouches = za;
          la(a2);
          a2.preventDefault();
          break;
        }
      }
    }
    function a(a2) {
      if ("touch" == a2.pointerType) {
        for (var b2 = false, n = 0; n < ia.length; n++) a2.pointerId == ia[n] && (ia[n] = p), ia[n] && (b2 = true);
        b2 || (ia = [], za = [], Ea());
        a2.preventDefault();
      }
    }
    function U(a2) {
      G && ("fullscreenonly" != b.mouseZoom || Aa) && (a2.preventDefault(), t(), N = Date.now(), a2.wheelDeltaY ? (x(b.hfov - 0.05 * a2.wheelDeltaY), w.hfov = 0 > a2.wheelDelta ? 1 : -1) : a2.wheelDelta ? (x(b.hfov - 0.05 * a2.wheelDelta), w.hfov = 0 > a2.wheelDelta ? 1 : -1) : a2.detail && (x(b.hfov + 1.5 * a2.detail), w.hfov = 0 < a2.detail ? 1 : -1), F());
    }
    function V(a2) {
      t();
      N = Date.now();
      Da();
      b.roll = 0;
      var f = a2.which || a2.keycode;
      0 > b.capturedKeyNumbers.indexOf(f) || (a2.preventDefault(), 27 == f ? Aa && h() : wa(f, true));
    }
    function $() {
      for (var a2 = 0; 10 > a2; a2++) r[a2] = false;
    }
    function R(a2) {
      var f = a2.which || a2.keycode;
      0 > b.capturedKeyNumbers.indexOf(f) || (a2.preventDefault(), wa(f, false));
    }
    function wa(a2, b2) {
      var n = false;
      switch (a2) {
        case 109:
        case 189:
        case 17:
        case 173:
          r[0] != b2 && (n = true);
          r[0] = b2;
          break;
        case 107:
        case 187:
        case 16:
        case 61:
          r[1] != b2 && (n = true);
          r[1] = b2;
          break;
        case 38:
          r[2] != b2 && (n = true);
          r[2] = b2;
          break;
        case 87:
          r[6] != b2 && (n = true);
          r[6] = b2;
          break;
        case 40:
          r[3] != b2 && (n = true);
          r[3] = b2;
          break;
        case 83:
          r[7] != b2 && (n = true);
          r[7] = b2;
          break;
        case 37:
          r[4] != b2 && (n = true);
          r[4] = b2;
          break;
        case 65:
          r[8] != b2 && (n = true);
          r[8] = b2;
          break;
        case 39:
          r[5] != b2 && (n = true);
          r[5] = b2;
          break;
        case 68:
          r[9] != b2 && (n = true), r[9] = b2;
      }
      n && b2 && (ba = "undefined" !== typeof performance && performance.now() ? performance.now() : Date.now(), F());
    }
    function ga() {
      if (G) {
        var a2 = false, f = b.pitch, n = b.yaw, c2 = b.hfov, e2;
        e2 = "undefined" !== typeof performance && performance.now() ? performance.now() : Date.now();
        ba === p && (ba = e2);
        var d2 = (e2 - ba) * b.hfov / 1700, d2 = Math.min(d2, 1);
        r[0] && true === b.keyboardZoom && (x(b.hfov + (0.8 * w.hfov + 0.5) * d2), a2 = true);
        r[1] && true === b.keyboardZoom && (x(b.hfov + (0.8 * w.hfov - 0.2) * d2), a2 = true);
        if (r[2] || r[6]) b.pitch += (0.8 * w.pitch + 0.2) * d2, a2 = true;
        if (r[3] || r[7]) b.pitch += (0.8 * w.pitch - 0.2) * d2, a2 = true;
        if (r[4] || r[8]) b.yaw += (0.8 * w.yaw - 0.2) * d2, a2 = true;
        if (r[5] || r[9]) b.yaw += (0.8 * w.yaw + 0.2) * d2, a2 = true;
        a2 && (N = Date.now());
        if (b.autoRotate) {
          if (1e-3 < e2 - ba) {
            var a2 = (e2 - ba) / 1e3, g2 = (w.yaw / a2 * d2 - 0.2 * b.autoRotate) * a2, g2 = (0 < -b.autoRotate ? 1 : -1) * Math.min(Math.abs(b.autoRotate * a2), Math.abs(g2));
            b.yaw += g2;
          }
          b.autoRotateStopDelay && (b.autoRotateStopDelay -= e2 - ba, 0 >= b.autoRotateStopDelay && (b.autoRotateStopDelay = false, Z = b.autoRotate, b.autoRotate = 0));
        }
        O.pitch && (m("pitch"), f = b.pitch);
        O.yaw && (m("yaw"), n = b.yaw);
        O.hfov && (m("hfov"), c2 = b.hfov);
        0 < d2 && !b.autoRotate && (a2 = 1 - b.friction, r[4] || r[5] || r[8] || r[9] || O.yaw || (b.yaw += w.yaw * d2 * a2), r[2] || r[3] || r[6] || r[7] || O.pitch || (b.pitch += w.pitch * d2 * a2), r[0] || r[1] || O.hfov || x(b.hfov + w.hfov * d2 * a2));
        ba = e2;
        0 < d2 && (w.yaw = 0.8 * w.yaw + (b.yaw - n) / d2 * 0.2, w.pitch = 0.8 * w.pitch + (b.pitch - f) / d2 * 0.2, w.hfov = 0.8 * w.hfov + (b.hfov - c2) / d2 * 0.2, f = b.autoRotate ? Math.abs(b.autoRotate) : 5, w.yaw = Math.min(
          f,
          Math.max(w.yaw, -f)
        ), w.pitch = Math.min(f, Math.max(w.pitch, -f)), w.hfov = Math.min(f, Math.max(w.hfov, -f)));
        r[0] && r[1] && (w.hfov = 0);
        (r[2] || r[6]) && (r[3] || r[7]) && (w.pitch = 0);
        (r[4] || r[8]) && (r[5] || r[9]) && (w.yaw = 0);
      }
    }
    function m(a2) {
      var f = O[a2], n = Math.min(1, Math.max((Date.now() - f.startTime) / 1e3 / (f.duration / 1e3), 0)), n = f.startPosition + b.animationTimingFunction(n) * (f.endPosition - f.startPosition);
      if (f.endPosition > f.startPosition && n >= f.endPosition || f.endPosition < f.startPosition && n <= f.endPosition || f.endPosition === f.startPosition) n = f.endPosition, w[a2] = 0, delete O[a2];
      b[a2] = n;
    }
    function z() {
      d("resize");
    }
    function F() {
      Ta || (Ta = true, ca());
    }
    function ca() {
      if (!Za) if (Fa(), Qa && clearTimeout(Qa), ha || true === X) requestAnimationFrame(ca);
      else if (r[0] || r[1] || r[2] || r[3] || r[4] || r[5] || r[6] || r[7] || r[8] || r[9] || b.autoRotate || O.pitch || O.yaw || O.hfov || 0.01 < Math.abs(w.yaw) || 0.01 < Math.abs(w.pitch) || 0.01 < Math.abs(w.hfov)) ga(), 0 <= b.autoRotateInactivityDelay && Z && Date.now() - N > b.autoRotateInactivityDelay && !b.autoRotate && (b.autoRotate = Z, da.lookAt(Ga, p, ra, 3e3)), requestAnimationFrame(ca);
      else if (C && (C.isLoading() || true === b.dynamic && Ma)) requestAnimationFrame(ca);
      else {
        B("animatefinished", { pitch: da.getPitch(), yaw: da.getYaw(), hfov: da.getHfov() });
        Ta = false;
        ba = p;
        var a2 = b.autoRotateInactivityDelay - (Date.now() - N);
        0 < a2 ? Qa = setTimeout(function() {
          b.autoRotate = Z;
          da.lookAt(Ga, p, ra, 3e3);
          F();
        }, a2) : 0 <= b.autoRotateInactivityDelay && Z && (b.autoRotate = Z, da.lookAt(Ga, p, ra, 3e3), F());
      }
    }
    function Fa() {
      var a2;
      if (G) {
        var f = C.getCanvas();
        false !== b.autoRotate && (360 < b.yaw ? b.yaw -= 360 : -360 > b.yaw && (b.yaw += 360));
        a2 = b.yaw;
        var n = 0;
        if (b.avoidShowingBackground) {
          var c2 = b.hfov / 2, d2 = 180 * Math.atan2(Math.tan(c2 / 180 * Math.PI), f.width / f.height) / Math.PI;
          b.vaov > b.haov ? Math.min(Math.cos((b.pitch - c2) / 180 * Math.PI), Math.cos((b.pitch + c2) / 180 * Math.PI)) : n = c2 * (1 - Math.min(Math.cos((b.pitch - d2) / 180 * Math.PI), Math.cos((b.pitch + d2) / 180 * Math.PI)));
        }
        var c2 = b.maxYaw - b.minYaw, d2 = -180, e2 = 180;
        360 > c2 && (d2 = b.minYaw + b.hfov / 2 + n, e2 = b.maxYaw - b.hfov / 2 - n, c2 < b.hfov && (d2 = e2 = (d2 + e2) / 2), b.yaw = Math.max(d2, Math.min(e2, b.yaw)));
        false === b.autoRotate && (360 < b.yaw ? b.yaw -= 360 : -360 > b.yaw && (b.yaw += 360));
        false !== b.autoRotate && a2 != b.yaw && ba !== p && (b.autoRotate *= -1);
        a2 = 2 * Math.atan(Math.tan(b.hfov / 180 * Math.PI * 0.5) / (f.width / f.height)) / Math.PI * 180;
        f = b.minPitch + a2 / 2;
        n = b.maxPitch - a2 / 2;
        b.maxPitch - b.minPitch < a2 && (f = n = (f + n) / 2);
        isNaN(f) && (f = -90);
        isNaN(n) && (n = 90);
        b.pitch = Math.max(f, Math.min(n, b.pitch));
        C.render(b.pitch * Math.PI / 180, b.yaw * Math.PI / 180, b.hfov * Math.PI / 180, { roll: b.roll * Math.PI / 180 });
        b.hotSpots.forEach(Ca);
        b.compass && (Ia.style.transform = "rotate(" + (-b.yaw - b.northOffset) + "deg)", Ia.style.webkitTransform = "rotate(" + (-b.yaw - b.northOffset) + "deg)");
      }
    }
    function Y(a2, b2, c2, d2) {
      this.w = a2;
      this.x = b2;
      this.y = c2;
      this.z = d2;
    }
    function na(a2) {
      var f;
      f = a2.alpha;
      var c2 = a2.beta;
      a2 = a2.gamma;
      c2 = [c2 ? c2 * Math.PI / 180 / 2 : 0, a2 ? a2 * Math.PI / 180 / 2 : 0, f ? f * Math.PI / 180 / 2 : 0];
      f = [Math.cos(c2[0]), Math.cos(c2[1]), Math.cos(c2[2])];
      c2 = [Math.sin(c2[0]), Math.sin(c2[1]), Math.sin(c2[2])];
      f = new Y(f[0] * f[1] * f[2] - c2[0] * c2[1] * c2[2], c2[0] * f[1] * f[2] - f[0] * c2[1] * c2[2], f[0] * c2[1] * f[2] + c2[0] * f[1] * c2[2], f[0] * f[1] * c2[2] + c2[0] * c2[1] * f[2]);
      f = f.multiply(new Y(Math.sqrt(0.5), -Math.sqrt(0.5), 0, 0));
      c2 = E.orientation ? -E.orientation * Math.PI / 180 / 2 : 0;
      f = f.multiply(new Y(Math.cos(c2), 0, -Math.sin(c2), 0)).toEulerAngles();
      "number" == typeof X && 10 > X ? X += 1 : 10 === X ? ($a = f[2] / Math.PI * 180 + b.yaw, X = true, requestAnimationFrame(ca)) : (b.pitch = f[0] / Math.PI * 180, b.roll = -f[1] / Math.PI * 180, b.yaw = -f[2] / Math.PI * 180 + $a);
    }
    function va() {
      try {
        var a2 = {};
        b.horizonPitch !== p && (a2.horizonPitch = b.horizonPitch * Math.PI / 180);
        b.horizonRoll !== p && (a2.horizonRoll = b.horizonRoll * Math.PI / 180);
        b.backgroundColor !== p && (a2.backgroundColor = b.backgroundColor);
        C.init(
          P,
          b.type,
          b.dynamic,
          b.haov * Math.PI / 180,
          b.vaov * Math.PI / 180,
          b.vOffset * Math.PI / 180,
          S,
          a2
        );
        true !== b.dynamic && (P = p);
      } catch (f) {
        if ("webgl error" == f.type || "no webgl" == f.type) K();
        else if ("webgl size error" == f.type) K(b.strings.textureSizeError.replace("%s", f.width).replace("%s", f.maxWidth));
        else throw K(b.strings.unknownError), f;
      }
    }
    function S() {
      if (b.sceneFadeDuration && C.fadeImg !== p) {
        C.fadeImg.style.opacity = 0;
        var a2 = C.fadeImg;
        delete C.fadeImg;
        setTimeout(function() {
          M.removeChild(a2);
          B("scenechangefadedone");
        }, b.sceneFadeDuration);
      }
      Ia.style.display = b.compass ? "inline" : "none";
      L();
      q.load.box.style.display = "none";
      sa !== p && (M.removeChild(sa), sa = p);
      G = true;
      B("load");
      F();
    }
    function La(a2) {
      a2.pitch = Number(a2.pitch) || 0;
      a2.yaw = Number(a2.yaw) || 0;
      var f = g.createElement("div");
      f.className = "pnlm-hotspot-base";
      f.className = a2.cssClass ? f.className + (" " + a2.cssClass) : f.className + (" pnlm-hotspot pnlm-sprite pnlm-" + D(a2.type));
      var c2 = g.createElement("span");
      a2.text && (c2.innerHTML = D(a2.text));
      var d2;
      if (a2.video) {
        d2 = g.createElement("video");
        var e2 = a2.video;
        b.basePath && !qa(e2) && (e2 = b.basePath + e2);
        d2.src = I(e2);
        d2.controls = true;
        d2.style.width = a2.width + "px";
        M.appendChild(f);
        c2.appendChild(d2);
      } else if (a2.image) {
        e2 = a2.image;
        b.basePath && !qa(e2) && (e2 = b.basePath + e2);
        d2 = g.createElement("a");
        d2.href = I(a2.URL ? a2.URL : e2, true);
        d2.target = "_blank";
        c2.appendChild(d2);
        var h2 = g.createElement("img");
        h2.src = I(e2);
        h2.style.width = a2.width + "px";
        h2.style.paddingTop = "5px";
        M.appendChild(f);
        d2.appendChild(h2);
        c2.style.maxWidth = "initial";
      } else if (a2.URL) {
        d2 = g.createElement("a");
        d2.href = I(a2.URL, true);
        if (a2.attributes) for (e2 in a2.attributes) d2.setAttribute(e2, a2.attributes[e2]);
        else d2.target = "_blank";
        M.appendChild(d2);
        f.className += " pnlm-pointer";
        c2.className += " pnlm-pointer";
        d2.appendChild(f);
      } else a2.sceneId && (f.onclick = f.ontouchend = function() {
        f.clicked || (f.clicked = true, y(a2.sceneId, a2.targetPitch, a2.targetYaw, a2.targetHfov));
        return false;
      }, f.className += " pnlm-pointer", c2.className += " pnlm-pointer"), M.appendChild(f);
      if (a2.createTooltipFunc) a2.createTooltipFunc(f, a2.createTooltipArgs);
      else if (a2.text || a2.video || a2.image) f.classList.add("pnlm-tooltip"), f.appendChild(c2), c2.style.width = c2.scrollWidth - 20 + "px", c2.style.marginLeft = -(c2.scrollWidth - f.offsetWidth) / 2 + "px", c2.style.marginTop = -c2.scrollHeight - 12 + "px";
      a2.clickHandlerFunc && (f.addEventListener("click", function(b2) {
        a2.clickHandlerFunc(b2, a2.clickHandlerArgs);
      }, "false"), f.className += " pnlm-pointer", c2.className += " pnlm-pointer");
      a2.div = f;
    }
    function L() {
      Ua || (b.hotSpots ? (b.hotSpots = b.hotSpots.sort(function(a2, b2) {
        return a2.pitch < b2.pitch;
      }), b.hotSpots.forEach(La)) : b.hotSpots = [], Ua = true, b.hotSpots.forEach(Ca));
    }
    function e() {
      var a2 = b.hotSpots;
      Ua = false;
      delete b.hotSpots;
      if (a2) for (var f = 0; f < a2.length; f++) {
        var c2 = a2[f].div;
        if (c2) {
          for (; c2.parentNode && c2.parentNode != M; ) c2 = c2.parentNode;
          M.removeChild(c2);
        }
        delete a2[f].div;
      }
    }
    function Ca(a2) {
      var f = Math.sin(a2.pitch * Math.PI / 180), c2 = Math.cos(a2.pitch * Math.PI / 180), d2 = Math.sin(b.pitch * Math.PI / 180), e2 = Math.cos(b.pitch * Math.PI / 180), g2 = Math.cos((-a2.yaw + b.yaw) * Math.PI / 180), h2 = f * d2 + c2 * g2 * e2;
      if (90 >= a2.yaw && -90 < a2.yaw && 0 >= h2 || (90 < a2.yaw || -90 >= a2.yaw) && 0 >= h2) a2.div.style.visibility = "hidden";
      else {
        var l2 = Math.sin((-a2.yaw + b.yaw) * Math.PI / 180), k2 = Math.tan(b.hfov * Math.PI / 360);
        a2.div.style.visibility = "visible";
        var m2 = C.getCanvas(), p2 = m2.clientWidth, m2 = m2.clientHeight, f = [-p2 / k2 * l2 * c2 / h2 / 2, -p2 / k2 * (f * e2 - c2 * g2 * d2) / h2 / 2], c2 = Math.sin(b.roll * Math.PI / 180), d2 = Math.cos(b.roll * Math.PI / 180), f = [f[0] * d2 - f[1] * c2, f[0] * c2 + f[1] * d2];
        f[0] += (p2 - a2.div.offsetWidth) / 2;
        f[1] += (m2 - a2.div.offsetHeight) / 2;
        p2 = "translate(" + f[0] + "px, " + f[1] + "px) translateZ(9999px) rotate(" + b.roll + "deg)";
        a2.scale && (p2 += " scale(" + ra / b.hfov / h2 + ")");
        a2.div.style.webkitTransform = p2;
        a2.div.style.MozTransform = p2;
        a2.div.style.transform = p2;
      }
    }
    function H(a2) {
      b = {};
      var f, c2, d2 = "haov vaov vOffset northOffset horizonPitch horizonRoll".split(" ");
      aa = [];
      for (f in Va) Va.hasOwnProperty(f) && (b[f] = Va[f]);
      for (f in k.default) if (k.default.hasOwnProperty(f)) if ("strings" == f) for (c2 in k.default.strings) k.default.strings.hasOwnProperty(c2) && (b.strings[c2] = D(k.default.strings[c2]));
      else b[f] = k.default[f], 0 <= d2.indexOf(f) && aa.push(f);
      if (null !== a2 && "" !== a2 && k.scenes && k.scenes[a2]) {
        var e2 = k.scenes[a2];
        for (f in e2) if (e2.hasOwnProperty(f)) if ("strings" == f) for (c2 in e2.strings) e2.strings.hasOwnProperty(c2) && (b.strings[c2] = D(e2.strings[c2]));
        else b[f] = e2[f], 0 <= d2.indexOf(f) && aa.push(f);
        b.scene = a2;
      }
      for (f in k) if (k.hasOwnProperty(f)) if ("strings" == f) for (c2 in k.strings) k.strings.hasOwnProperty(c2) && (b.strings[c2] = D(k.strings[c2]));
      else b[f] = k[f], 0 <= d2.indexOf(f) && aa.push(f);
    }
    function l(a2) {
      if ((a2 = a2 ? a2 : false) && "preview" in b) {
        var c2 = b.preview;
        b.basePath && !qa(c2) && (c2 = b.basePath + c2);
        sa = g.createElement("div");
        sa.className = "pnlm-preview-img";
        sa.style.backgroundImage = "url('" + I(c2).replace(/"/g, "%22").replace(/'/g, "%27") + "')";
        M.appendChild(sa);
      }
      var c2 = b.title, d2 = b.author;
      a2 && ("previewTitle" in b && (b.title = b.previewTitle), "previewAuthor" in b && (b.author = b.previewAuthor));
      b.hasOwnProperty("title") || (q.title.innerHTML = "");
      b.hasOwnProperty("author") || (q.author.innerHTML = "");
      b.hasOwnProperty("title") || b.hasOwnProperty("author") || (q.container.style.display = "none");
      v.load.innerHTML = "<p>" + b.strings.loadButtonLabel + "</p>";
      q.load.boxp.innerHTML = b.strings.loadingLabel;
      for (var e2 in b) if (b.hasOwnProperty(e2)) switch (e2) {
        case "title":
          q.title.innerHTML = D(b[e2]);
          q.container.style.display = "inline";
          break;
        case "author":
          var h2 = D(b[e2]);
          b.authorURL && (h2 = g.createElement("a"), h2.href = I(b.authorURL, true), h2.target = "_blank", h2.innerHTML = D(b[e2]), h2 = h2.outerHTML);
          q.author.innerHTML = b.strings.bylineLabel.replace("%s", h2);
          q.container.style.display = "inline";
          break;
        case "fallback":
          h2 = g.createElement("a");
          h2.href = I(b[e2], true);
          h2.target = "_blank";
          h2.textContent = "Click here to view this panorama in an alternative viewer.";
          var k2 = g.createElement("p");
          k2.textContent = "Your browser does not support WebGL.";
          k2.appendChild(g.createElement("br"));
          k2.appendChild(h2);
          q.errorMsg.innerHTML = "";
          q.errorMsg.appendChild(k2);
          break;
        case "hfov":
          x(Number(b[e2]));
          break;
        case "autoLoad":
          true === b[e2] && C === p && (q.load.box.style.display = "inline", v.load.style.display = "none", oa());
          break;
        case "showZoomCtrl":
          v.zoom.style.display = b[e2] && false != b.showControls ? "block" : "none";
          break;
        case "showFullscreenCtrl":
          v.fullscreen.style.display = b[e2] && false != b.showControls && ("fullscreen" in g || "mozFullScreen" in g || "webkitIsFullScreen" in g || "msFullscreenElement" in g) ? "block" : "none";
          break;
        case "hotSpotDebug":
          Wa.style.display = b[e2] ? "block" : "none";
          break;
        case "showControls":
          b[e2] || (v.orientation.style.display = "none", v.zoom.style.display = "none", v.fullscreen.style.display = "none");
          break;
        case "orientationOnByDefault":
          b[e2] && Ra();
      }
      a2 && (c2 ? b.title = c2 : delete b.title, d2 ? b.author = d2 : delete b.author);
    }
    function h() {
      if (G && !Na) if (Aa) g.exitFullscreen ? g.exitFullscreen() : g.mozCancelFullScreen ? g.mozCancelFullScreen() : g.webkitCancelFullScreen ? g.webkitCancelFullScreen() : g.msExitFullscreen && g.msExitFullscreen();
      else try {
        s.requestFullscreen ? s.requestFullscreen() : s.mozRequestFullScreen ? s.mozRequestFullScreen() : s.msRequestFullscreen ? s.msRequestFullscreen() : s.webkitRequestFullScreen();
      } catch (a2) {
      }
    }
    function d(a2) {
      g.fullscreenElement || g.fullscreen || g.mozFullScreen || g.webkitIsFullScreen || g.msFullscreenElement ? (v.fullscreen.classList.add("pnlm-fullscreen-toggle-button-active"), Aa = true) : (v.fullscreen.classList.remove("pnlm-fullscreen-toggle-button-active"), Aa = false);
      "resize" !== a2 && B("fullscreenchange", Aa);
      C.resize();
      x(b.hfov);
      F();
    }
    function u(a2) {
      var c2 = b.minHfov;
      "multires" == b.type && C && !b.multiResMinHfov && (c2 = Math.min(c2, C.getCanvas().width / (b.multiRes.cubeResolution / 90 * 0.9)));
      if (c2 > b.maxHfov) return console.log("HFOV bounds do not make sense (minHfov > maxHfov)."), b.hfov;
      var d2 = b.hfov, d2 = a2 < c2 ? c2 : a2 > b.maxHfov ? b.maxHfov : a2;
      b.avoidShowingBackground && C && (a2 = C.getCanvas(), d2 = Math.min(d2, 360 * Math.atan(Math.tan((b.maxPitch - b.minPitch) / 360 * Math.PI) / a2.height * a2.width) / Math.PI));
      return d2;
    }
    function x(a2) {
      b.hfov = u(a2);
      B("zoomchange", b.hfov);
    }
    function t() {
      O = {};
      Z = b.autoRotate ? b.autoRotate : Z;
      b.autoRotate = false;
    }
    function Ya() {
      Na && (q.load.box.style.display = "none", q.errorMsg.style.display = "none", Na = false, M.style.display = "block", B("errorcleared"));
      G = false;
      v.load.style.display = "none";
      q.load.box.style.display = "inline";
      oa();
    }
    function y(a2, c2, d2, h2, g2) {
      G || (g2 = true);
      G = false;
      O = {};
      var m2, q2;
      if (b.sceneFadeDuration && !g2 && (m2 = C.render(b.pitch * Math.PI / 180, b.yaw * Math.PI / 180, b.hfov * Math.PI / 180, { returnImage: true }), m2 !== p)) {
        g2 = new Image();
        g2.className = "pnlm-fade-img";
        g2.style.transition = "opacity " + b.sceneFadeDuration / 1e3 + "s";
        g2.style.width = "100%";
        g2.style.height = "100%";
        g2.onload = function() {
          y(a2, c2, d2, h2, true);
        };
        g2.src = m2;
        M.appendChild(g2);
        C.fadeImg = g2;
        return;
      }
      g2 = "same" === c2 ? b.pitch : c2;
      m2 = "same" === d2 ? b.yaw : "sameAzimuth" === d2 ? b.yaw + (b.northOffset || 0) - (k.scenes[a2].northOffset || 0) : d2;
      q2 = "same" === h2 ? b.hfov : h2;
      e();
      H(a2);
      w.yaw = w.pitch = w.hfov = 0;
      l();
      g2 !== p && (b.pitch = g2);
      m2 !== p && (b.yaw = m2);
      q2 !== p && (b.hfov = q2);
      B("scenechange", a2);
      Ya();
    }
    function Da() {
      E.removeEventListener("deviceorientation", na);
      v.orientation.classList.remove("pnlm-orientation-button-active");
      X = false;
    }
    function Ra() {
      "function" === typeof DeviceMotionEvent.requestPermission ? DeviceOrientationEvent.requestPermission().then(function(a2) {
        "granted" == a2 && (X = 1, E.addEventListener("deviceorientation", na), v.orientation.classList.add("pnlm-orientation-button-active"));
      }) : (X = 1, E.addEventListener("deviceorientation", na), v.orientation.classList.add("pnlm-orientation-button-active"));
    }
    function D(a2) {
      return k.escapeHTML ? String(a2).split(/&/g).join("&amp;").split('"').join("&quot;").split("'").join("&#39;").split("<").join("&lt;").split(">").join("&gt;").split("/").join("&#x2f;").split("\n").join("<br>") : String(a2).split("\n").join("<br>");
    }
    function I(a2, b2) {
      try {
        var c2 = decodeURIComponent(ab(a2)).replace(/[^\w:]/g, "").toLowerCase();
      } catch (d2) {
        return "about:blank";
      }
      return 0 === c2.indexOf("javascript:") || 0 === c2.indexOf("vbscript:") ? (console.log("Script URL removed."), "about:blank") : b2 && 0 === c2.indexOf("data:") ? (console.log("Data URI removed from link."), "about:blank") : a2;
    }
    function ab(a2) {
      return a2.replace(/&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/ig, function(a3, b2) {
        b2 = b2.toLowerCase();
        return "colon" === b2 ? ":" : "#" === b2.charAt(0) ? "x" === b2.charAt(1) ? String.fromCharCode(parseInt(b2.substring(2), 16)) : String.fromCharCode(+b2.substring(1)) : "";
      });
    }
    function B(a2) {
      if (a2 in T) for (var b2 = T[a2].length; 0 < b2; b2--) T[a2][T[a2].length - b2].apply(null, [].slice.call(arguments, 1));
    }
    var da = this, b, C, sa, ha = false, N = Date.now(), xa = 0, ya = 0, Ha = -1, Oa = 0, Pa = 0, r = Array(10), Aa = false, G, Na = false, Sa = false, P, ba, w = { yaw: 0, pitch: 0, hfov: 0 }, Ta = false, X = false, $a = 0, Qa, Z = 0, ra, Ga, O = {}, T = {}, aa = [], Ma = false, Ua = false, Za = false, Va = {
      hfov: 100,
      minHfov: 50,
      multiResMinHfov: false,
      maxHfov: 120,
      pitch: 0,
      minPitch: p,
      maxPitch: p,
      yaw: 0,
      minYaw: -180,
      maxYaw: 180,
      roll: 0,
      haov: 360,
      vaov: 180,
      vOffset: 0,
      autoRotate: false,
      autoRotateInactivityDelay: -1,
      autoRotateStopDelay: p,
      type: "equirectangular",
      northOffset: 0,
      showFullscreenCtrl: true,
      dynamic: false,
      dynamicUpdate: false,
      doubleClickZoom: true,
      keyboardZoom: true,
      mouseZoom: true,
      showZoomCtrl: true,
      autoLoad: false,
      showControls: true,
      orientationOnByDefault: false,
      hotSpotDebug: false,
      backgroundColor: [0, 0, 0],
      avoidShowingBackground: false,
      animationTimingFunction: function(a2) {
        return 0.5 > a2 ? 2 * a2 * a2 : -1 + (4 - 2 * a2) * a2;
      },
      draggable: true,
      disableKeyboardCtrl: false,
      crossOrigin: "anonymous",
      touchPanSpeedCoeffFactor: 1,
      capturedKeyNumbers: [16, 17, 27, 37, 38, 39, 40, 61, 65, 68, 83, 87, 107, 109, 173, 187, 189],
      friction: 0.15,
      strings: {
        loadButtonLabel: "Click to<br>Load<br>Panorama",
        loadingLabel: "Loading...",
        bylineLabel: "by %s",
        noPanoramaError: "No panorama image was specified.",
        fileAccessError: "The file %s could not be accessed.",
        malformedURLError: "There is something wrong with the panorama URL.",
        iOS8WebGLError: "Due to iOS 8's broken WebGL implementation, only progressive encoded JPEGs work for your device (this panorama uses standard encoding).",
        genericWebGLError: "Your browser does not have the necessary WebGL support to display this panorama.",
        textureSizeError: "This panorama is too big for your device! It's %spx wide, but your device only supports images up to %spx wide. Try another device. (If you're the author, try scaling down the image.)",
        unknownError: "Unknown error. Check developer console."
      }
    };
    s = "string" === typeof s ? g.getElementById(s) : s;
    s.classList.add("pnlm-container");
    s.tabIndex = 0;
    var J = g.createElement("div");
    J.className = "pnlm-ui";
    s.appendChild(J);
    var M = g.createElement("div");
    M.className = "pnlm-render-container";
    s.appendChild(M);
    var W = g.createElement("div");
    W.className = "pnlm-dragfix";
    J.appendChild(W);
    var fa = g.createElement("span");
    fa.className = "pnlm-about-msg";
    fa.innerHTML = '<a href="https://pannellum.org/" target="_blank">Pannellum</a> 2.5.6';
    J.appendChild(fa);
    W.addEventListener("contextmenu", ja);
    var q = {}, Wa = g.createElement("div");
    Wa.className = "pnlm-sprite pnlm-hot-spot-debug-indicator";
    J.appendChild(Wa);
    q.container = g.createElement("div");
    q.container.className = "pnlm-panorama-info";
    q.title = g.createElement("div");
    q.title.className = "pnlm-title-box";
    q.container.appendChild(q.title);
    q.author = g.createElement("div");
    q.author.className = "pnlm-author-box";
    q.container.appendChild(q.author);
    J.appendChild(q.container);
    q.load = {};
    q.load.box = g.createElement("div");
    q.load.box.className = "pnlm-load-box";
    q.load.boxp = g.createElement("p");
    q.load.box.appendChild(q.load.boxp);
    q.load.lbox = g.createElement("div");
    q.load.lbox.className = "pnlm-lbox";
    q.load.lbox.innerHTML = '<div class="pnlm-loading"></div>';
    q.load.box.appendChild(q.load.lbox);
    q.load.lbar = g.createElement("div");
    q.load.lbar.className = "pnlm-lbar";
    q.load.lbarFill = g.createElement("div");
    q.load.lbarFill.className = "pnlm-lbar-fill";
    q.load.lbar.appendChild(q.load.lbarFill);
    q.load.box.appendChild(q.load.lbar);
    q.load.msg = g.createElement("p");
    q.load.msg.className = "pnlm-lmsg";
    q.load.box.appendChild(q.load.msg);
    J.appendChild(q.load.box);
    q.errorMsg = g.createElement("div");
    q.errorMsg.className = "pnlm-error-msg pnlm-info-box";
    J.appendChild(q.errorMsg);
    var v = {};
    v.container = g.createElement("div");
    v.container.className = "pnlm-controls-container";
    J.appendChild(v.container);
    v.load = g.createElement("div");
    v.load.className = "pnlm-load-button";
    v.load.addEventListener("click", function() {
      l();
      Ya();
    });
    J.appendChild(v.load);
    v.zoom = g.createElement("div");
    v.zoom.className = "pnlm-zoom-controls pnlm-controls";
    v.zoomIn = g.createElement("div");
    v.zoomIn.className = "pnlm-zoom-in pnlm-sprite pnlm-control";
    v.zoomIn.addEventListener("click", function() {
      G && (x(b.hfov - 5), F());
    });
    v.zoom.appendChild(v.zoomIn);
    v.zoomOut = g.createElement("div");
    v.zoomOut.className = "pnlm-zoom-out pnlm-sprite pnlm-control";
    v.zoomOut.addEventListener("click", function() {
      G && (x(b.hfov + 5), F());
    });
    v.zoom.appendChild(v.zoomOut);
    v.container.appendChild(v.zoom);
    v.fullscreen = g.createElement("div");
    v.fullscreen.addEventListener("click", h);
    v.fullscreen.className = "pnlm-fullscreen-toggle-button pnlm-sprite pnlm-fullscreen-toggle-button-inactive pnlm-controls pnlm-control";
    (g.fullscreenEnabled || g.mozFullScreenEnabled || g.webkitFullscreenEnabled || g.msFullscreenEnabled) && v.container.appendChild(v.fullscreen);
    v.orientation = g.createElement("div");
    v.orientation.addEventListener("click", function(a2) {
      X ? Da() : Ra();
    });
    v.orientation.addEventListener("mousedown", function(a2) {
      a2.stopPropagation();
    });
    v.orientation.addEventListener("touchstart", function(a2) {
      a2.stopPropagation();
    });
    v.orientation.addEventListener("pointerdown", function(a2) {
      a2.stopPropagation();
    });
    v.orientation.className = "pnlm-orientation-button pnlm-orientation-button-inactive pnlm-sprite pnlm-controls pnlm-control";
    var Xa = false;
    E.DeviceOrientationEvent && "https:" == location.protocol && 0 <= navigator.userAgent.toLowerCase().indexOf("mobi") && (v.container.appendChild(v.orientation), Xa = true);
    var Ia = g.createElement("div");
    Ia.className = "pnlm-compass pnlm-controls pnlm-control";
    J.appendChild(Ia);
    k.firstScene ? H(k.firstScene) : k.default && k.default.firstScene ? H(k.default.firstScene) : H(null);
    l(true);
    var ia = [], za = [];
    Y.prototype.multiply = function(a2) {
      return new Y(this.w * a2.w - this.x * a2.x - this.y * a2.y - this.z * a2.z, this.x * a2.w + this.w * a2.x + this.y * a2.z - this.z * a2.y, this.y * a2.w + this.w * a2.y + this.z * a2.x - this.x * a2.z, this.z * a2.w + this.w * a2.z + this.x * a2.y - this.y * a2.x);
    };
    Y.prototype.toEulerAngles = function() {
      var a2 = Math.atan2(2 * (this.w * this.x + this.y * this.z), 1 - 2 * (this.x * this.x + this.y * this.y)), b2 = Math.asin(2 * (this.w * this.y - this.z * this.x)), c2 = Math.atan2(2 * (this.w * this.z + this.x * this.y), 1 - 2 * (this.y * this.y + this.z * this.z));
      return [a2, b2, c2];
    };
    this.isLoaded = function() {
      return Boolean(G);
    };
    this.getPitch = function() {
      return b.pitch;
    };
    this.setPitch = function(a2, c2, d2, e2) {
      N = Date.now();
      if (1e-6 >= Math.abs(a2 - b.pitch)) return "function" == typeof d2 && d2(e2), this;
      (c2 = c2 == p ? 1e3 : Number(c2)) ? (O.pitch = { startTime: Date.now(), startPosition: b.pitch, endPosition: a2, duration: c2 }, "function" == typeof d2 && setTimeout(function() {
        d2(e2);
      }, c2)) : b.pitch = a2;
      F();
      return this;
    };
    this.getPitchBounds = function() {
      return [b.minPitch, b.maxPitch];
    };
    this.setPitchBounds = function(a2) {
      b.minPitch = Math.max(-90, Math.min(a2[0], 90));
      b.maxPitch = Math.max(-90, Math.min(a2[1], 90));
      return this;
    };
    this.getYaw = function() {
      return (b.yaw + 540) % 360 - 180;
    };
    this.setYaw = function(a2, c2, d2, e2) {
      N = Date.now();
      if (1e-6 >= Math.abs(a2 - b.yaw)) return "function" == typeof d2 && d2(e2), this;
      c2 = c2 == p ? 1e3 : Number(c2);
      a2 = (a2 + 180) % 360 - 180;
      c2 ? (180 < b.yaw - a2 ? a2 += 360 : 180 < a2 - b.yaw && (a2 -= 360), O.yaw = { startTime: Date.now(), startPosition: b.yaw, endPosition: a2, duration: c2 }, "function" == typeof d2 && setTimeout(function() {
        d2(e2);
      }, c2)) : b.yaw = a2;
      F();
      return this;
    };
    this.getYawBounds = function() {
      return [b.minYaw, b.maxYaw];
    };
    this.setYawBounds = function(a2) {
      b.minYaw = Math.max(-360, Math.min(a2[0], 360));
      b.maxYaw = Math.max(-360, Math.min(a2[1], 360));
      return this;
    };
    this.getHfov = function() {
      return b.hfov;
    };
    this.setHfov = function(a2, c2, d2, e2) {
      N = Date.now();
      if (1e-6 >= Math.abs(a2 - b.hfov)) return "function" == typeof d2 && d2(e2), this;
      (c2 = c2 == p ? 1e3 : Number(c2)) ? (O.hfov = { startTime: Date.now(), startPosition: b.hfov, endPosition: u(a2), duration: c2 }, "function" == typeof d2 && setTimeout(function() {
        d2(e2);
      }, c2)) : x(a2);
      F();
      return this;
    };
    this.getHfovBounds = function() {
      return [b.minHfov, b.maxHfov];
    };
    this.setHfovBounds = function(a2) {
      b.minHfov = Math.max(0, a2[0]);
      b.maxHfov = Math.max(0, a2[1]);
      return this;
    };
    this.lookAt = function(a2, c2, d2, e2, g2, h2) {
      e2 = e2 == p ? 1e3 : Number(e2);
      a2 !== p && 1e-6 < Math.abs(a2 - b.pitch) && (this.setPitch(a2, e2, g2, h2), g2 = p);
      c2 !== p && 1e-6 < Math.abs(c2 - b.yaw) && (this.setYaw(c2, e2, g2, h2), g2 = p);
      d2 !== p && 1e-6 < Math.abs(d2 - b.hfov) && (this.setHfov(d2, e2, g2, h2), g2 = p);
      "function" == typeof g2 && g2(h2);
      return this;
    };
    this.getNorthOffset = function() {
      return b.northOffset;
    };
    this.setNorthOffset = function(a2) {
      b.northOffset = Math.min(360, Math.max(0, a2));
      F();
      return this;
    };
    this.getHorizonRoll = function() {
      return b.horizonRoll;
    };
    this.setHorizonRoll = function(a2) {
      b.horizonRoll = Math.min(
        90,
        Math.max(-90, a2)
      );
      C.setPose(b.horizonPitch * Math.PI / 180, b.horizonRoll * Math.PI / 180);
      F();
      return this;
    };
    this.getHorizonPitch = function() {
      return b.horizonPitch;
    };
    this.setHorizonPitch = function(a2) {
      b.horizonPitch = Math.min(90, Math.max(-90, a2));
      C.setPose(b.horizonPitch * Math.PI / 180, b.horizonRoll * Math.PI / 180);
      F();
      return this;
    };
    this.startAutoRotate = function(a2, c2) {
      a2 = a2 || Z || 1;
      c2 = c2 === p ? Ga : c2;
      b.autoRotate = a2;
      da.lookAt(c2, p, ra, 3e3);
      F();
      return this;
    };
    this.stopAutoRotate = function() {
      Z = b.autoRotate ? b.autoRotate : Z;
      b.autoRotate = false;
      b.autoRotateInactivityDelay = -1;
      return this;
    };
    this.stopMovement = function() {
      t();
      w = { yaw: 0, pitch: 0, hfov: 0 };
    };
    this.getRenderer = function() {
      return C;
    };
    this.setUpdate = function(a2) {
      Ma = true === a2;
      C === p ? pa() : F();
      return this;
    };
    this.mouseEventToCoords = function(a2) {
      return ta(a2);
    };
    this.loadScene = function(a2, b2, c2, d2) {
      false !== G && y(a2, b2, c2, d2);
      return this;
    };
    this.getScene = function() {
      return b.scene;
    };
    this.addScene = function(a2, b2) {
      k.scenes[a2] = b2;
      return this;
    };
    this.removeScene = function(a2) {
      if (b.scene === a2 || !k.scenes.hasOwnProperty(a2)) return false;
      delete k.scenes[a2];
      return true;
    };
    this.toggleFullscreen = function() {
      h();
      return this;
    };
    this.getConfig = function() {
      return b;
    };
    this.getContainer = function() {
      return s;
    };
    this.addHotSpot = function(a2, c2) {
      if (c2 === p && b.scene === p) b.hotSpots.push(a2);
      else {
        var d2 = c2 !== p ? c2 : b.scene;
        if (k.scenes.hasOwnProperty(d2)) k.scenes[d2].hasOwnProperty("hotSpots") || (k.scenes[d2].hotSpots = [], d2 == b.scene && (b.hotSpots = k.scenes[d2].hotSpots)), k.scenes[d2].hotSpots.push(a2);
        else throw "Invalid scene ID!";
      }
      if (c2 === p || b.scene == c2) La(a2), G && Ca(a2);
      return this;
    };
    this.removeHotSpot = function(a2, c2) {
      if (c2 === p || b.scene == c2) {
        if (!b.hotSpots) return false;
        for (var d2 = 0; d2 < b.hotSpots.length; d2++) if (b.hotSpots[d2].hasOwnProperty("id") && b.hotSpots[d2].id === a2) {
          for (var e2 = b.hotSpots[d2].div; e2.parentNode != M; ) e2 = e2.parentNode;
          M.removeChild(e2);
          delete b.hotSpots[d2].div;
          b.hotSpots.splice(d2, 1);
          return true;
        }
      } else if (k.scenes.hasOwnProperty(c2)) {
        if (!k.scenes[c2].hasOwnProperty("hotSpots")) return false;
        for (d2 = 0; d2 < k.scenes[c2].hotSpots.length; d2++) if (k.scenes[c2].hotSpots[d2].hasOwnProperty("id") && k.scenes[c2].hotSpots[d2].id === a2) return k.scenes[c2].hotSpots.splice(
          d2,
          1
        ), true;
      } else return false;
    };
    this.resize = function() {
      C && z();
    };
    this.isLoaded = function() {
      return G;
    };
    this.isOrientationSupported = function() {
      return Xa || false;
    };
    this.stopOrientation = function() {
      Da();
    };
    this.startOrientation = function() {
      Xa && Ra();
    };
    this.isOrientationActive = function() {
      return Boolean(X);
    };
    this.on = function(a2, b2) {
      T[a2] = T[a2] || [];
      T[a2].push(b2);
      return this;
    };
    this.off = function(a2, b2) {
      if (!a2) return T = {}, this;
      if (b2) {
        var c2 = T[a2].indexOf(b2);
        0 <= c2 && T[a2].splice(c2, 1);
        0 == T[a2].length && delete T[a2];
      } else delete T[a2];
      return this;
    };
    this.destroy = function() {
      Za = true;
      clearTimeout(Qa);
      C && C.destroy();
      Sa && (g.removeEventListener("mousemove", ua, false), g.removeEventListener("mouseup", ma, false), s.removeEventListener("mozfullscreenchange", d, false), s.removeEventListener("webkitfullscreenchange", d, false), s.removeEventListener("msfullscreenchange", d, false), s.removeEventListener("fullscreenchange", d, false), E.removeEventListener("resize", z, false), E.removeEventListener("orientationchange", z, false), s.removeEventListener("keydown", V, false), s.removeEventListener("keyup", R, false), s.removeEventListener(
        "blur",
        $,
        false
      ), g.removeEventListener("mouseleave", ma, false));
      s.innerHTML = "";
      s.classList.remove("pnlm-container");
    };
  }
  return { viewer: function(g2, k) {
    return new Ba(g2, k);
  } };
}(window, document);
//# sourceMappingURL=pannellum.js.map
